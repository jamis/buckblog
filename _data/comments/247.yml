---
- date: 2005-11-03
  author: Darrin Eden
  content: Strangely enough, I felt Neal Stephenson's  treatment of Leibniz in his
    "Baroque Cycle" helped my understanding of monads more than other texts.
- date: 2005-11-03
  author: Tom Moertel
  content: "Don't worry about monads.  You'll hate them now, but learn to love\nthem
    later.  <tt> ;-)</tt>\n\nOn the _let_ vs. _where_ question, I almost always use
    _where_ when\nwriting purely functional code.  In monadic code, however, I use
    _let_\nmore often because of how it interacts with _do_ notation.\n\nTo avoid
    cluttering your namespaces, you can import modules\nqualified:\n\n<pre><code>import
    qualified Data.Map as Map\nemptySymtab :: Map.Map String Int\nemptySymtab = Map.empty\n</code></pre>\n\nTo
    avoid having to pass things around, use a State monad to do the\npassing for you.
    \ Then create helper functions to work with\nyour state within the monad.  Together,
    the monad and helper functions\nform a tiny kernel that the rest of your code
    can use.  For example,\nI modified your maze code to use a tiny monadic kernel
    to factor\nout the random-number chores:\n\n* \"Maze2.hs\":http://community.moertel.com/~thor/Maze2.hs\n*
    \"Diff\":http://community.moertel.com/~thor/MazeStateMonad.diff (this is probably
    more telling)\n\n(BTW, if that's your first Haskell code, good job!)\n\nIn a larger
    project, you might use monad transformers to layer\nfunctionality (like state
    management) on top of other monads and, in\nparallel, build up a kernel that provides
    just the behavior your\nproject needs.  That's when the monad goodness kicks in:
    You can make\nmonads do a lot of heavy lifting behind the scenes.  All you have
    to\ndo is get it right once - when crafting your kernel - and the type\nsystem
    will keep you honest from then on.\n\nCheers. --Tom\n "
- date: 2005-11-04
  author: Jamis
  content: Tom, thank-you for the excellent advice and feedback! I'll dissect your
    contributed Maze.hs and glean as much as I can from it.
- date: 2005-11-04
  author: Phil
  content: Since you're missing objects, I'm wondering why you chose to learn Haskell
    over OCAML? (I ask this as someone who also wants to learn a functional language
    and is leaning towards learning OCAML)
- date: 2005-11-04
  author: Jamis
  content: |-
    Phil, mostly because I've looked (very briefly) at OCaml, and was not immediately impressed. I've also heard from others "in the know" that, although OCaml is interesting, Haskell is cleaner.

    I do plan on checking out OCaml one of these days, but I chose to start with Haskell.
- date: 2005-11-05
  author: cmo
  content: |-
    keep going,

    this shows the start of 'How monads could be implemented in Ruby!'

    http://moonbase.rydia.net/mental/writings/programming/monads-in-ruby/00introduction.html
- date: 2005-11-05
  author: 'null'
  content: www.ocaml-tutorial.org
- date: 2005-11-05
  author: Jamis
  content: cmo, thanks for that link! That (and some pages linked from that) is exactly
    what I've needed to break into monads. After a full day of reading, I think it's
    finally starting to make sense.
- date: 2005-11-07
  author: flevour
  content: |-
    Hi all, I would like to share with you a problem I encounter whwnever I try to start learning a new programming language: I lack any fantasy about what I should try to code in that new language. And everybody knows that if you just study a language without putting it in practice it's like not studying it at all.
    Have you got suggestions about how to improve my programming fantasy or any resource that could help me self-making exercies?
- date: 2005-11-07
  author: Jamis
  content: 'flevour, what I usually do is one of two things. I either pick some non-trivial
    project that I''ve done before (like the maze-generator), or I pick some little
    utility I''ve been meaning to write. Regardless, pick something that is interesting
    to you. The Haskell tutorials are full of examples that use cloned sheep and binary
    trees, and while those are useful for demonstrating concepts, they don''t really
    tickle my fancy. Consider choosing a project that uses a database as the backend,
    or uses a GUI. Or one that is fronted by a web-based UI. '
- date: 2005-11-08
  author: Jef
  content: A multi-language resource for useful beginners' code snippets (that may
    need some optimization here or there) is pleac.sf.net (but also see the Ruby cookbook
    at www.rubygarden.org). A Ruby script that tries to implement a Haskell feature
    but still seems to have room for improvement is datatype (cvs.m17n.org/viewcvs/ruby/).
- date: 2005-11-09
  author: Manuel
  content: The reason for both let/where being in the language is that Haskell is
    a commitee language where everybody wants a pice of her/his ideas to show up in
    the resulting specification IMO.
- date: 2005-11-09
  author: Sam
  content: |-
    If you're still missing objects (and inheritance), check out OOHaskell (not O'Haskell) and HList (for heterogeneous lists).

    You can use similar constructs in your Haskell apps to give an object/inheritance "feel" to your program while still have the benefits of functional programming.

    While there is research in functional GUI libraries, the most practical Haskell GUI libraries are all bindings to libraries like GTK+ and wxWidgets -- these bindings usually offer an API that is functional with an object/inheritance flavor -- so it is possible to reconcile the two idioms to a degree.
- date: 2006-09-08
  author: glguy
  content: The reason for let and where is that the two do different things (have
    different scope).
- date: 2006-12-01
  author: piggy
  content: <p>As for Ocaml, it’s fast, but not so user friendly <span class="caps">IMHO</span>.
    The toplevel is poor unless you later find it should be used with ledit or emacs.
    Ocaml doesn’t provide productive syntax sugar or built-in functions as many as
    Haskell does, such as list comprehension. I don’t understand why. Yet F# (Ocaml
    dialect for .Net) seems a promising road with cleaner syntax and other sugar,
    though it’s still in early stage of development.</p>
